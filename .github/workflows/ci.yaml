name: ci

on:
  push:
    branches:
      - main

env:
  NODE_VERSION: '16.13.2'
  SENTRY_ORG: 'rahil-p'
  GCP_PROJECT_ID: 'rahil-p'

jobs:
  evaluate-workspaces:
    name: Evaluate Workspaces
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.store-sha.outputs.result }}
      cache: ${{ steps.store-cache.outputs.result }}
      services: ${{ steps.store-services.outputs.result }}
      tests: ${{ steps.store-tests.outputs.result }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn
      - name: Store Cache
        id: store-cache
        run: |-
          result=$(yarn config get cacheFolder);
          echo "::set-output name=result::${result}";
          echo "$result";
      - name: Cache Modules
        uses: actions/cache@v3
        with:
          path: ${{ steps.store-cache.outputs.result }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install Modules
        run: yarn install --immutable
      - name: Store Last Successful Build
        id: store-sha
        run: |-
          result=$( \
            gh run list \
              --json name,status,conclusion,event,headBranch,headSha \
              --jq '
                map(
                  select(
                    .name == "ci" and
                    .status == "completed" and
                    .conclusion == "success" and
                    .event == "push" and
                    .headBranch == "main"
                  )
                ) | min_by(.createdAt) | .headSha
              '
          );
          echo "::set-output name=result::${result}";
          echo "$result";
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.event.repository.name }}
      - name: Store Services
        id: store-services
        run: |-
          result=$( \
            args="--recursive --since=${{ steps.store-sha.outputs.result }}" \
            yarn run list \
              | jq -c 'map(select(.location | test("(?<=services\/)[^\/]+$")))' \
          );
          echo "::set-output name=result::${result}";
          echo "$result";
      - name: Store Tests
        id: store-tests
        run: |-
          result=$( \
            args="--recursive --since=${{ steps.store-sha.outputs.result }}" \
            yarn run list \
              | jq -c 'map(select(.location | test("(?<=(packages|services)\/)[^\/]+$")))' \
          );
          echo "::set-output name=result::${result}";
          echo "$result";

  test:
    name: Test Packages
    runs-on: ubuntu-latest
    needs:
      - evaluate-workspaces
    if: ${{ needs.evaluate-workspaces.outputs.tests != '[]' && needs.evaluate-workspaces.outputs.tests != '' }}
    strategy:
      matrix:
        workspace: ${{ fromJSON(needs.evaluate-workspaces.outputs.tests) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn
      - name: Cache Modules
        uses: actions/cache@v3
        with:
          path: ${{ needs.evaluate-workspaces.outputs.cache }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install Modules
        run: yarn install --immutable
      - name: Run Tests
        run: yarn workspace ${{ matrix.workspace.name }} run test

  publish-container:
    name: Publish Containers
    runs-on: ubuntu-latest
    needs:
      - evaluate-workspaces
      - test
    if: ${{ needs.evaluate-workspaces.outputs.services != '[]' && needs.evaluate-workspaces.outputs.services != '' }}
    strategy:
      matrix:
        workspace: ${{ fromJSON(needs.evaluate-workspaces.outputs.services) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Authenticate to Artifact Registry
        uses: docker/login-action@v1
        with:
          registry: us-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GCP_AR_JSON_KEY }}
      - name: Store Package Version
        id: store-version
        run: |-
          result="$( \
            cat ${{ matrix.workspace.location }}/package.json \
              | grep version \
              | head -1 \
              | awk -F: '{ print $2 }' | sed 's/[\",]//g' \
              | tr -d '[[:space:]]' \
          )";
          echo "::set-output name=result::${result}";
      - name: Store Package Name
        id: store-name
        run: |-
          result="$( \
            cat ${{ matrix.workspace.location }}/package.json \
              | grep name \
              | head -1 \
              | awk -F: '{ print $2 }' | sed 's/[\",]//g; s/@rahil-p\///g' \
              | tr -d '[[:space:]]' \
          )";
          echo "::set-output name=result::web-${result}";
      - name: Store Metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: us-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/services/${{ steps.store-name.outputs.result }}
          tags: |
            type=sha
            type=semver,pattern={{version}},value=${{ steps.store-version.outputs.result }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.store-version.outputs.result }}
      - name: Authenticate to Artifact Registry
        id: auth
        uses: google-github-actions/auth@v0
        with:
          token_format: access_token
          credentials_json: ${{ secrets.GCP_AR_JSON_KEY }}
      - name: Authenticate to Artifact Registry (continued)
        uses: docker/login-action@v1
        with:
          registry: us-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ${{ matrix.workspace.location }}/docker/Dockerfile
          secrets: |
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            sentry_org=${{ env.SENTRY_ORG }}
            sentry_project=${{ steps.store-name.outputs.result }}
